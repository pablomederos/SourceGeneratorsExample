using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SourceGeneratorExample;

public static class RepositoryMarker
{
    public const string MarkerNamespace = "SourceGeneratorExample";
    public const string MarkerInterfaceName = "IRepository";
    public const string MarkerFullyQualifiedName = $"{MarkerNamespace}.{MarkerInterfaceName}";
    
     // String alternative text 
//      private const string Source = 
//          $$"""
//            // <auto-generated/>
//            namespace {{MarkerNamespace}} {
//                public interface {{MarkerInterfaceName}} { }
//            }
//            """;

    // SyntaxTree alternative text
    private static readonly SyntaxTriviaList AutogeneratedComment = SyntaxFactory
        .TriviaList(SyntaxFactory.Comment("// <auto-generated/>"));
    
    private static readonly InterfaceDeclarationSyntax Interface = SyntaxFactory
        .InterfaceDeclaration(SyntaxFactory.Identifier(MarkerInterfaceName));
    
    private static readonly NamespaceDeclarationSyntax Namespace = SyntaxFactory
        .NamespaceDeclaration(SyntaxFactory.IdentifierName(MarkerNamespace))
        .WithLeadingTrivia(AutogeneratedComment)
        .AddMembers(Interface);

    private static readonly string Source = 
        Namespace.NormalizeWhitespace().ToFullString();
    
    public static void GenerateModelMarker(this IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => 
            ctx.AddSource(
                $"{MarkerFullyQualifiedName}.g.cs",
                SourceText.From(Source, Encoding.UTF8))
            );
    }
}